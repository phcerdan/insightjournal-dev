# From https://github.com/okgrow/graphql-scalars
# We use URL and DateTime
# type URL {
# }
# type DateTime {
# }
interface Person {
  id: ID
  firstname: String
  lastname: String
  identifier: AuthorIdentifier
}

fragment Names on Person {
  firstname: String
  lastname: String
}

type Institution {
  id: ID
  name: String
  address: String
}

type Author implements Person {
  id: ID
  firstname: String
  lastname: String
  identifier: AuthorIdentifier
  publications: [Publication]
  institutions: [Institution]
}

type Reviewer implements Person {
  id: ID
  firstname: String
  lastname: String
  identifier: AuthorIdentifier
  publications: [Publication]
  institutions: [Institution]
}

# interface AuthorIdentifier {
type AuthorIdentifier {
  id: ID
  github: String
  orcid: String
  email: [String]
}

type Journal {
  id: ID
  name: String
}

# Set with an array of publications. It deals with history, versions and evolution of a publication
type PublicationHistory {
  id: ID
  latest: Publication
  publications: [Publications]
}

type ExternalPublicationLink {
  id: ID
  name: String
  url: URL
}

type DocumentIdentifier {
  id: ID
  doi: String
  pubmed: String
}

type Publication {
  id: ID
  publication_history: PublicationHistory
  title: String
  journals: [Journal] # Do not limit Publication to only have one journal. This allows to handle pre-publications (Arxiv, etc), or more scenarios
  authors: [Author]
  reviews: [Review]
  date_submitted: DateTime
  date_published: DateTime
  identifier: DocumentIdentifier
  license: String
  tags: [String]
  version: String
  external_links: [ExternalPublicationLink]
  abstract: String
  content: String
  submitted_by: Author
  # Data blobs: fragment PublicationDataBlobs
  manuscript: DataPath
  manuscript_supplemental: [DataPath]
  data_other: [DataPath]
}

fragment PublicationDataBlobs on Publication {
  manuscript: DataPath
  manuscript_supplemental: [DataPath]
  data_other: [DataPath]
}

type Url {
  url: String
}

type DataPath {
  path: String
}

type Review {
  id: ID
  publication: Publication
  authors: [Author]
  identifier: DocumentIdentifier
  content: String
  score: Float
  manuscript: [DataPath]
  data_other: [DataPath]
}

fragment ReviewDataBlobs on Review {
  manuscript: [DataPath]
  data_other: [DataPath]
}


type Query {
  author(id: ID, firstname: String): Author
  journal(id: ID, name: String): Journal
}


